import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

@SuppressWarnings("deprecation")
public class ImageClient extends JFrame implements ActionListener {
    // Declare private instance variables for the GUI components and the images
    private JButton blankButton;
    private JButton solvedButton;
    private JLabel imageLabel;
    private Image blankImage;
    private Image solvedImage;
    private int imageWidth = 500; // set the width of the images here

    /**
 * Test suite:
 * The partitions: the blank button, the solved button
 * Their subdomains: click the blank button, click the solved button
 * Their coverage: click the blank button then the solved button, click the solved button then the blank button
 *
 * @throws IOException if an I/O error occurs while reading the image from a URL
 */
//@Parameter types: None
//@Return type: None
//Exceptions thrown: IOException
// Constructor to initialize the GUI components and load the images
    public ImageClient() {
        super("Image Display");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create the buttons and the image label
        blankButton = new JButton("Blank");
        solvedButton = new JButton("Solved");
        imageLabel = new JLabel();

        // Create a panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(blankButton);
        buttonPanel.add(solvedButton);

        // Add the panel and the image label to the frame
        add(buttonPanel, BorderLayout.NORTH);
        add(imageLabel, BorderLayout.CENTER);

        // Add action listeners to the buttons
        blankButton.addActionListener(this);
        solvedButton.addActionListener(this);

        // Set the size and visibility of the frame
        setSize(400, 400);
        setVisible(true);

        // Load the images from URLs and scale them to the specified width
        try {
            blankImage = ImageIO.read(new URL("http://localhost:8000/blank.png"));
            solvedImage = ImageIO.read(new URL("http://localhost:8000/solved.png"));

            blankImage = blankImage.getScaledInstance(imageWidth, -1, Image.SCALE_DEFAULT);
            solvedImage = solvedImage.getScaledInstance(imageWidth, -1, Image.SCALE_DEFAULT);
   
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //@Parameter types: ActionEvent
//Return type: void
//Exceptions thrown: IllegalArgumentException
/**
 * Test suite:
 * The partitions: the blank button, the solved button
 * Their subdomains: click the blank button, click the solved button
 * Their coverage: click the blank button then the solved button, click the solved button then the blank button
 *
 * @param e the ActionEvent generated by the button press
 *
 * @throws IllegalArgumentException if the event source is not a valid button
 */
// Action listener method to update the image when a button is pressed
@Override
    public void actionPerformed(ActionEvent e) throws IllegalArgumentException {
        if (e.getSource() == blankButton) {
            imageLabel.setIcon(new ImageIcon(blankImage));
        } else if (e.getSource() == solvedButton) {
            imageLabel.setIcon(new ImageIcon(solvedImage));
        } else {
            throw new IllegalArgumentException("Invalid event source: " + e.getSource());
        }
    }
/**
 * Test suite:
 * The partitions: none
 * Their subdomains: none
 * Their coverage: none
    /**
 * Displays an image and provides buttons to switch between a blank and a solved version of the image.
 *
 * @param args an array of command-line arguments for the application, not used in this implementation
 *
 * @throws IOException if an I/O error occurs while reading the image from a URL
 */
    // Main method to create an instance of the ImageClient class
    public static void main(String[] args) {
        new ImageClient();
    }
}
